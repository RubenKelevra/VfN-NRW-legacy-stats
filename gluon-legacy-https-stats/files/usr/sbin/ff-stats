#!/bin/sh

if [ -r /tmp/randomdelay ] #adding delay we don't want to ddos our servers
    then sleep $(cat /tmp/randomdelay) 
else
    sleep `awk "BEGIN{srand(); print(int(rand()*299));}"`
fi

mkdir -p /etc/ssl/certs #fix polarssl ... polarssl sucks.

[ ! -d /tmp/ff-stats/ ] && mkdir /tmp/ff-stats/
L2MESH=$(/usr/sbin/brctl show | sed -n -e '/^br-client[[:space:]]/,/^\S/ { /^\(br-client[[:space:]]\|\t\)/s/^.*\t//p }' | grep -v bat0 | tr '\n' ' ')
BATIF=$(for i in `ls -1 /sys/class/net/`; do [ -f /sys/class/net/$i/batman_adv/mesh_iface ] && grep -q bat0 /sys/class/net/$i/batman_adv/mesh_iface && echo -n "$i "; done)

(
echo ///start
echo -n ///build=
echo "$(cat /lib/gluon/release) (gluon-$(cat /lib/gluon/gluon-version)) autoupdate-branch: $(uci get autoupdater.settings.branch), autoupdate: $(uci get autoupdater.settings.enabled)"

echo -n ///hwid=
echo "$(cat /lib/gluon/core/sysconfig/primary_mac)" | sed "s/://g"

echo -n ///timestamp=
date +%s

echo -n ///uptime=
cat /proc/uptime

echo -n ///load=
cat /proc/loadavg | awk '{ print $1 }'

echo -n ///cpu_stats=
top -bn1 | grep ^CPU | awk '{ print $2,$4,$6,$8,$10,$12,$14 }' | sed 's/% /,/g' | sed 's/%//'

echo ///l2mesh=$L2MESH

echo ///batif=$BATIF

clients=""
echo '///wlanclients'
for if in $L2MESH; do
  clients=`iw dev $if station dump | grep ^Station | cut -d ' ' -f 2`
done
for mac in $clients; do
  echo "00:00:00:00:00:00"
done

echo ///ifconfig
ifconfig | egrep 'HWaddr|bytes'

echo -n ///vpnactive=
cat /sys/kernel/debug/batman_adv/bat0/originators | grep -q mesh-vpn\\] && echo 1 || echo 0

echo -n ///ipv4_connectivity=
ping -q -I br-wan 8.8.8.8 -c 4 -W 5 >/dev/null 2>&1
if test $? -eq 0; then
  echo 1
else
  echo 0
fi
echo -n ///ipv6_connectivity=
ping -q -I br-wan 2001:4860:4860::8888 -c 4 -W 5 >/dev/null 2>&1
if test $? -eq 0; then
  echo 1
else
  echo 0
fi

echo -n ///gwq=
echo $(cat /sys/kernel/debug/batman_adv/bat0/gateways | egrep ' \([\ 0-9]+\) ' | cut -d\( -f2 | cut -d\) -f1 | sort -n | tail -n1)

echo -n ///fastd=
[ $(uci get fastd.mesh_vpn.secret) != 'generate' ] &&  echo $(/etc/init.d/fastd show_key mesh_vpn)

echo -n ///community=
echo $(lua -e 'print(require("gluon.site_config").site_code)')

echo -n ///gluon_name=
echo "$(uci get system.@system[0].hostname)"
echo -n ///gluon_primarymac=
echo "$(cat /lib/gluon/core/sysconfig/primary_mac)"
echo -n ///gluon_lat=
echo "$(uci get gluon-node-info.@location[0].latitude)"
echo -n ///gluon_lon=
echo "$(uci get gluon-node-info.@location[0].longitude)"
echo -n ///gluon_alt=
echo "$(uci get gluon-node-info.@location[0].altitude)"
echo -n ///gluon_contact=
echo "$(uci get gluon-node-info.@owner[0].contact)"    
echo -n ///gluon_advisor=
echo "$(uci get gluon-node-info.@advisor[0].contact)"    
echo -n ///gluon_address=
echo "$(uci get gluon-node-info.@location[0].address)"
echo -n ///gluon_hardware_model=
echo $(lua -e 'print(require("gluon.platform").get_model())')



tmp=""

freq=""
noise=""
for e in $(iw dev client0 survey dump | grep -E "frequency|noise" | sed "s/[\t]*//g" | cut -d' ' -f1 | sed 's/frequency/frequ/g'); do
  case "${e:0:5}" in
    frequ)
      if [ ! -z $freq ]; then
        tmp="$tmp$freq:,"
      fi
      freq=${e:6}
      ;;
    noise)
      noise=${e:6}
      tmp="$tmp$freq:$noise,"
      unset noise freq
      ;;
  esac
done

iw dev client1 info > /dev/null 2>&1 
if test $? -ne 0; then
  [ ! -z $tmp ] && tmp="${tmp%?}" #delete last char
fi

freq=""
noise=""
for e in $(iw dev client1 survey dump | grep -E "frequency|noise" | sed "s/[\t]*//g" | cut -d' ' -f1 | sed 's/frequency/frequ/g'); do
  case "${e:0:5}" in
    frequ)
      if [ ! -z $freq ]; then
        tmp="$tmp$freq:,"
      fi
      freq=${e:6}
      ;;
    noise)
      noise=${e:6}
      tmp="$tmp$freq:$noise,"
      unset noise freq
      ;;
  esac
done

[ ! -z $tmp ] && echo "///noise=${tmp%?}"

airtime_input=$(iw dev client0 survey dump | grep -A5 "\[in use\]")
if [ ! -z airtime_input ]; then
  airtime_wlan0_active=$(echo $airtime_input | cut -d" " -f12)
  airtime_wlan0_busy=$(echo $airtime_input | cut -d" " -f17)
  airtime_wlan0_rx=$(echo $airtime_input | cut -d" " -f22)
  airtime_wlan0_tx=$(echo $airtime_input | cut -d" " -f27)
  iw phy0 info | grep -q '2412 MHz' && airtime_wlan0_freq="24"
  iw phy0 info | grep -q '5180 MHz' && airtime_wlan0_freq="50"
fi
airtime_input=$(iw dev client1 survey dump | grep -A5 "\[in use\]")
if [ ! -z airtime_input ]; then
  airtime_wlan1_active=$(echo $airtime_input | cut -d" " -f12)
  airtime_wlan1_busy=$(echo $airtime_input | cut -d" " -f17)
  airtime_wlan1_rx=$(echo $airtime_input | cut -d" " -f22)
  airtime_wlan1_tx=$(echo $airtime_input | cut -d" " -f27)
  iw phy1 info | grep -q '2412 MHz' && airtime_wlan1_freq="24"
  iw phy1 info | grep -q '5180 MHz' && airtime_wlan1_freq="50"
fi
unset airtime_input

[ ! -z $airtime_wlan0_freq ] && (
  echo "///airtime_stats_wlan0=$airtime_wlan0_freq,$airtime_wlan0_active,$airtime_wlan0_busy,$airtime_wlan0_rx,$airtime_wlan0_tx"
)
[ ! -z $airtime_wlan1_freq ] && (
  echo "///airtime_stats_wlan1=$airtime_wlan1_freq,$airtime_wlan1_active,$airtime_wlan1_busy,$airtime_wlan1_rx,$airtime_wlan1_tx"
)

echo ///bathoods
bats=$(batctl o | sed 's/[\(\)]//g' | awk '{ if ($1 == $4) { print $1 "=" $3 }}')
for bat in $bats; do
  bat_mac=$(echo $bat | cut -d '=' -f 1)
  bat_txrate=$(iw dev ibss0 station dump | grep -E "^Station|tx bitrate" | grep -A1 "$bat_mac" | grep "tx bitrate" | cut -d ' ' -f 2 | cut -d$'\t' -f 2)
  if [ -z $bat_txrate ]; then
    bat_txrate=$(iw dev ibss1 station dump | grep -E "^Station|tx bitrate" | grep -A1 "$bat_mac" | grep "tx bitrate" | cut -d ' ' -f 2 | cut -d$'\t' -f 2)
  fi
  if [ -z $bat_txrate ]; then #seems to be a lan/vpn
    min_brwan_speed=999999
    tmp_str=""
    tmp_str2=""
    #get interface for link
    if [ $(batctl o | cut -d ']' -f 1 | grep "^$bat_mac" | cut -d '[' -f 2 | sed "s/^[ ]*//") == "br-wan" ]; then
      if [ -z $br_wan_speed ]; then
        for br_if in $(ls /sys/class/net/br-wan/brif); do
          case "$br_if" in
            eth*)
              #add speed of interface if its readable
              tmp_str2=$(cat /sys/class/net/$br_if/speed)
              [ ! -z $tmp_str2 ] && tmp_str="$tmp_str,$tmp_str2"
              ;;
          esac
          if [ -z $tmp_str ]; then
            bat_txrate=0
          else #there are one or more values
            for e in $(echo $tmp_str | sed "s/,/\n/g"); do
              [ -z $e ] && continue
              [ "$e" -lt "$min_brwan_speed" ] && min_brwan_speed=$e
            done
            
            #fix value if its still the invalid start value
            [ "$min_brwan_speed" -eq "999999" ] && min_brwan_speed=0
            br_wan_speed=$min_brwan_speed
          fi
        done
      fi
      bat_txrate=$br_wan_speed
    else
      bat_txrate=0
    fi
  fi
  echo "$bat,$bat_txrate"
done

echo ///wlan-scan
[ -f /tmp/wlanscan ] && cat /tmp/wlanscan

echo 

) > /tmp/ff-stats/`date +%s`

[ -f /tmp/wlanscan ] && rm /tmp/wlanscan



#////// bad stuff ;)

IPV6=$(ip addr show dev "br-client" | grep "inet6 " | grep "scope global" | cut -d ' ' -f 6 | cut -d '/' -f 1)

if [ -z "$IPV6" ]; then
  IPV6=$(ip addr show dev "br-client" | grep "inet6 " | grep "scope link" | cut -d ' ' -f 6 | cut -d '/' -f 1)
fi

IPV6=$(echo $IPV6 |  awk '{ print $1 }')

for i in /tmp/ff-stats/*; do 
  /usr/sbin/ff-curl api/collect.php?ip="$IPV6" -v -X POST --data "`cat $i`" > /tmp/ff-stats-result && rm $i || exit
done
